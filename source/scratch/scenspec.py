#!/usr/bin/python3

from   argparse import ArgumentParser
from   inspect  import isclass
import json

# Base class of all scenario objects
class base: 
  def __init__(self,**kwargs): 
    for k in kwargs: setattr(self,k,kwargs[k])
  def render(self,depth): 
    print(' ' * depth + self.__class__.__name__)
  def field_render(depth,fldval,fldnam): 
    print(' ' * depth + fldnam + ':', str(fldval))

# Parse arguments
def get_args():
  p = ArgumentParser(description='CLOSURE Scenario Configuration')
  p.add_argument('-f', '--file', required=True, type=str, help='Input file')
  return p.parse_args()

# Non-function, non-internal fields of scenario class instance
def fields(v):
  return [a for a in dir(v) if not callable(getattr(v,a)) and not a.startswith("__")]

# Name of valid scenario class
def valid_class_name(n):
  g = globals()
  return True if n in g and isclass(g[n]) and issubclass(g[n], base) else False

# Instance of valid scenario class
def valid_class_instance(v):
  return True if isclass(type(v)) and issubclass(type(v), base) else False

# Compose scenario from dict
def compose(n,d):
  if not valid_class_name(n): raise Exception('Unsupported class: ' + n)
  def subcomp(k,v):
    if isinstance(v,list):   return [compose(k,i) for i in v] 
    elif isinstance(v,dict): return compose(k,v)
    else:                    return v
  return globals()[n](**{k:subcomp(k,v) for k,v in d.items()})

# Traverse scenario 
def traverse(v,name,depth):
  if valid_class_instance(v): 
    v.render(depth)
    for i in fields(v): 
      x = getattr(v,i)
      if isinstance(x,list):
        for j in x: traverse(j,i,depth+1)
      else:
        traverse(x,i,depth+1)
  else:
    base.field_render(depth,v,name)
   
# Scenario classes derived from base class
class scenario(base):  pass
class enclave(base):   pass
class xdhost(base):    pass
class inthost(base):   pass
class link(base):      pass
class hub(base):       pass
class xdgateway(base): pass
class hwconf(base):    pass
class swconf(base):    pass
class guardconf(base): pass

if __name__ == '__main__':
  args = get_args()
  # XXX: JSON would come from CAPO tools
  # XXX: JSON can be readily extended without modifying base class and compose 
  # XXX: As JSON is extended, may add classes or modify per-class render 
  # XXX: JSON could be optionally generated by driver.py for convenience
  # XXX: endow derived classes with custom rendering functions for IMN/DOT/...
  with open(args.file, 'r') as inf: d = json.load(inf)
  scen = compose('scenario',d)
  traverse(scen,'scenario',0)
